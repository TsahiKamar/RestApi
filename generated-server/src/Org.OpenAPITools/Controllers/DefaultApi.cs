/*
 * Simple Calculator API
 *
 * This is a simple API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tsahikamar@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Add two numbers
        /// </summary>
        /// <remarks>Accepts two numbers and returns the result of Add</remarks>
        /// <param name="calcItem"></param>
        /// <response code="200">Successfully added</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/api/calculator/add")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorAddPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalcResponseItem), description: "Successfully added")]
        public virtual IActionResult CalculatorAddPost([FromBody]CalcItem calcItem)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CalcResponseItem));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0.8008282\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CalcResponseItem>(exampleJson)
            : default(CalcResponseItem);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Divide two numbers
        /// </summary>
        /// <remarks>Accepts two numbers and returns the result of division</remarks>
        /// <param name="calcItem"></param>
        /// <response code="200">Successfully divided</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/api/calculator/divide")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorDividePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalcResponseItem), description: "Successfully divided")]
        public virtual IActionResult CalculatorDividePost([FromBody]CalcItem calcItem)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CalcResponseItem));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0.8008282\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CalcResponseItem>(exampleJson)
            : default(CalcResponseItem);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Multiply two numbers
        /// </summary>
        /// <remarks>Accepts two numbers and returns multiple result</remarks>
        /// <param name="calcItem"></param>
        /// <response code="200">Successfully multiplied</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/api/calculator/multiply")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorMultiplyPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalcResponseItem), description: "Successfully multiplied")]
        public virtual IActionResult CalculatorMultiplyPost([FromBody]CalcItem calcItem)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CalcResponseItem));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0.8008282\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CalcResponseItem>(exampleJson)
            : default(CalcResponseItem);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Subtraction two numbers
        /// </summary>
        /// <remarks>Accepts two numbers and returns the result of subtraction</remarks>
        /// <param name="calcItem"></param>
        /// <response code="200">Successfully subtracted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/api/calculator/subtraction")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CalculatorSubtractionPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CalcResponseItem), description: "Successfully subtracted")]
        public virtual IActionResult CalculatorSubtractionPost([FromBody]CalcItem calcItem)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CalcResponseItem));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 0.8008282\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CalcResponseItem>(exampleJson)
            : default(CalcResponseItem);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CREATE TEST ONLY TOKEN
        /// </summary>
        /// <remarks>Accepts username and password</remarks>
        /// <param name="userItem"></param>
        /// <response code="200">Successfully created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/api/token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("TokenPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(TokenResponseItem), description: "Successfully created")]
        public virtual IActionResult TokenPost([FromBody]UserItem userItem)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TokenResponseItem));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"token\" : \"token\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TokenResponseItem>(exampleJson)
            : default(TokenResponseItem);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
